/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tp.showimgfromlink.view;

import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.text.DefaultEditorKit;

import org.tp.showimgfromlink.controller.ImageController;
import org.tp.showimgfromlink.model.NetImage;

/**
 *
 * @author meg4r0m
 */
public class MainFrame extends javax.swing.JFrame {
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton boutonAfficherImage;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JMenuItem jMenuItem2;
	private javax.swing.JTextField textUrlImage;
	private JPopupMenu popup = new JPopupMenu();
	// End of variables declaration//GEN-END:variables
	
	private static final long serialVersionUID = 680425789890993326L;
	/**
	 * Creates new form MainFrame
	 */
	public MainFrame() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		javax.swing.JPanel parentPanel = new javax.swing.JPanel();
		javax.swing.JLabel labelDescriptionImage = new javax.swing.JLabel();
		textUrlImage = new javax.swing.JTextField();
		boutonAfficherImage = new javax.swing.JButton();
		javax.swing.JMenuBar jMenuBar1 = new javax.swing.JMenuBar();
		javax.swing.JMenu jMenu1 = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		javax.swing.JMenu jMenu2 = new javax.swing.JMenu();
		jMenuItem2 = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		labelDescriptionImage.setText("Veuillez saisir le lien vers votre image:");

		textUrlImage.setText("Votre lien vers une image");
		textUrlImage.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusGained(java.awt.event.FocusEvent evt) {
				jTextField1FocusGained(evt);
			}

			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextField1FocusLost(evt);
			}
		});
		textUrlImage.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField1ActionPerformed(evt);
			}
		});
		textUrlImage.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				jTextField1KeyTyped(evt);
			}
		});
		textUrlImage.addMouseListener(new MouseListener() {
			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				if (textUrlImage.getText().equals("Votre lien vers une image")) {
					textUrlImage.setText("");
					textUrlImage.setForeground(Color.BLACK);
					boutonAfficherImage.setEnabled(false);
				}
			}

			@Override
			public void mouseExited(MouseEvent e) {
				if (textUrlImage.getText().isEmpty()) {
					textUrlImage.setForeground(Color.GRAY);
					if (!textUrlImage.getComponentPopupMenu().isShowing()) {
						textUrlImage.setText("Votre lien vers une image");
					}
					boutonAfficherImage.setEnabled(false);
				} else {
					boutonAfficherImage.setEnabled(true);
				}
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
	    JMenuItem item = new JMenuItem(new DefaultEditorKit.CutAction());
	    item.setText("Couper");
	    popup.add(item);
	    item = new JMenuItem(new DefaultEditorKit.CopyAction());
	    item.setText("Copier");
	    popup.add(item);
	    item = new JMenuItem(new DefaultEditorKit.PasteAction());
	    item.setText("Coller");
	    popup.add(item);
	    textUrlImage.setComponentPopupMenu(popup);
		
		boutonAfficherImage.setText("Afficher cette image");
		boutonAfficherImage.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				submit(evt);
			}
		});

		javax.swing.GroupLayout gl_parentPanel = new javax.swing.GroupLayout(parentPanel);
		parentPanel.setLayout(gl_parentPanel);
		gl_parentPanel.setHorizontalGroup(gl_parentPanel.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(gl_parentPanel.createSequentialGroup().addContainerGap()
						.addGroup(gl_parentPanel.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(labelDescriptionImage, javax.swing.GroupLayout.DEFAULT_SIZE, 376,
										Short.MAX_VALUE)
								.addComponent(textUrlImage).addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										gl_parentPanel.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE)
												.addComponent(boutonAfficherImage)))
						.addContainerGap()));
		gl_parentPanel.setVerticalGroup(gl_parentPanel.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(gl_parentPanel.createSequentialGroup().addContainerGap(23, Short.MAX_VALUE)
						.addComponent(labelDescriptionImage)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(textUrlImage, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18).addComponent(boutonAfficherImage).addContainerGap()));

		jMenu1.setText("Menu");

		jMenuItem1.setText("Exit");
		jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem1ActionPerformed(evt);
			}
		});
		jMenu1.add(jMenuItem1);

		jMenuBar1.add(jMenu1);

		jMenu2.setText("A Propos");
        jMenuItem2.setText("Ennonc√© TP");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap().addComponent(parentPanel,
						javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap().addComponent(parentPanel,
						javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField1ActionPerformed
		String textFieldValue = textUrlImage.getText();
		if (textFieldValue.isEmpty()) {
			boutonAfficherImage.setEnabled(false);
		} else {
			boutonAfficherImage.setEnabled(true);
		}
	}// GEN-LAST:event_jTextField1ActionPerformed

	private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextField1FocusGained
		if (textUrlImage.getText().equals("Votre lien vers une image")) {
			textUrlImage.setText("");
			textUrlImage.setForeground(Color.BLACK);
			boutonAfficherImage.setEnabled(false);
		}
	}// GEN-LAST:event_jTextField1FocusGained

	private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextField1FocusLost
		if (textUrlImage.getText().isEmpty()) {
			textUrlImage.setForeground(Color.GRAY);
			if (!textUrlImage.getComponentPopupMenu().isShowing()) {
				textUrlImage.setText("Votre lien vers une image");
			}
			boutonAfficherImage.setEnabled(false);
		} else {
			boutonAfficherImage.setEnabled(true);
		}
	}// GEN-LAST:event_jTextField1FocusLost

	private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jTextField1KeyTyped
		String textFieldValue = textUrlImage.getText();
		if (textFieldValue.isEmpty()) {
			boutonAfficherImage.setEnabled(false);
		} else {
			boutonAfficherImage.setEnabled(true);
		}
	}// GEN-LAST:event_jTextField1KeyTyped

	private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed
		System.exit(0);
	}// GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        AboutFrame about = new AboutFrame();
        about.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        about.setVisible(true);
    } 
	
	private void submit(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		initSessionData();
		showImageFrame();
	}// GEN-LAST:event_jButton1ActionPerformed

	private void showImageFrame() {
		ImageFrame imageShow = new ImageFrame();
		imageShow.init();
		imageShow.pack();
		imageShow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		imageShow.setLocationRelativeTo(null);
		imageShow.setVisible(true);
	}

	private NetImage initSessionData() {
		NetImage imageEntity = new NetImage(textUrlImage.getText());
		ImageController.getInstance().setCurrentImage(imageEntity);
		return imageEntity;
	}

	
	
	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainFrame().setVisible(true);
			}
		});
	}
}
